{"version":3,"sources":["../source/classify elapsed.js"],"names":["classify_elapsed","days_in_a_month","days_in_a_year","a_day","gradation","canonical","result","unit","factor","threshold","convenient","granularity","threshold_for_minute","threshold_for_month","elapsed","units","gradation_steps","filter","indexOf","step","i","length","next_step","undefined","specific_threshold","next_step_threshold","exact_amount","amount","Math","round","remainder","previous_step","previous_step_result","Error","join"],"mappings":"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","file":"classify elapsed.js","sourcesContent":["// https://www.quora.com/What-is-the-average-number-of-days-in-a-month\nexport const days_in_a_month = 30.44\n\n// \"400 years have 146097 days (taking into account leap year rules)\"\nexport const days_in_a_year = 146097 / 400\n\nexport const a_day = 24 * 60 * 60 // in seconds\n\nexport const gradation =\n{\n\t// just now\n\t// 1 second ago\n\t// …\n\t// 59 seconds ago\n\t// 1 minute ago\n\t// …\n\t// 59 minutes ago\n\t// 1 hour ago\n\t// …\n\t// 24 hours ago\n\t// 1 day ago\n\t// …\n\t// 7 days ago\n\t// 1 week ago\n\t// …\n\t// 3 weeks ago\n\t// 1 month ago\n\t// …\n\t// 11 months ago\n\t// 1 year ago\n\t// …\n\tcanonical: () =>\n\t{\n\t\tconst result =\n\t\t[\n\t\t\t{\n\t\t\t\tunit: 'just-now',\n\t\t\t\tfactor: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'second',\n\t\t\t\tfactor: 1,\n\t\t\t\tthreshold: 0.5\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'minute',\n\t\t\t\tfactor: 60,\n\t\t\t\tthreshold: 59.5\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'hour',\n\t\t\t\tfactor: 60 * 60,\n\t\t\t\tthreshold: 59.5 * 60\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'day',\n\t\t\t\tfactor: a_day,\n\t\t\t\tthreshold: 23.5 * 60 * 60\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'week',\n\t\t\t\tfactor: 7 * a_day,\n\t\t\t\tthreshold: 6.5 * a_day\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'month',\n\t\t\t\tfactor: days_in_a_month * a_day,\n\t\t\t\tthreshold: 3.5 * 7 * a_day * a_day\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'year',\n\t\t\t\tfactor: days_in_a_year * a_day,\n\t\t\t\tthreshold: 11.5 * days_in_a_month * a_day\n\t\t\t}\n\t\t]\n\n\t\treturn result\n\t},\n\n\t// just now\n\t// 1 minute ago\n\t// 2 minutes ago\n\t// 5 minutes ago\n\t// 10 minutes ago\n\t// 15 minutes ago\n\t// 20 minutes ago\n\t// half an hour ago\n\t// an hour ago\n\t// 2 hours ago\n\t// …\n\t// 20 hours ago\n\t// a day ago\n\t// 2 days ago\n\t// 5 days ago\n\t// a week ago\n\t// 2 weeks ago\n\t// 3 weeks ago\n\t// a month ago\n\t// 2 months ago\n\t// 4 months ago\n\t// half a year ago\n\t// a year ago\n\t// 2 years ago\n\t// …\n\tconvenient: () =>\n\t{\n\t\tconst result =\n\t\t[\n\t\t\t{\n\t\t\t\tunit: 'just-now',\n\t\t\t\tfactor: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'second',\n\t\t\t\tfactor: 1,\n\t\t\t\tthreshold: 1,\n\t\t\t\t'threshold_for_just-now': 45\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'minute',\n\t\t\t\tfactor: 60,\n\t\t\t\tthreshold: 45\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'minute',\n\t\t\t\tfactor: 60,\n\t\t\t\tthreshold: 2.5 * 60,\n\t\t\t\tgranularity: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'half-hour',\n\t\t\t\tfactor: 30 * 60,\n\t\t\t\tthreshold: 22.5 * 60\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'hour',\n\t\t\t\tfactor: 60 * 60,\n\t\t\t\tthreshold: 42.5 * 60,\n\t\t\t\tthreshold_for_minute: 52.5 * 60\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'day',\n\t\t\t\tfactor: a_day,\n\t\t\t\tthreshold: (20.5 / 24) * a_day\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'week',\n\t\t\t\tfactor: 7 * a_day,\n\t\t\t\tthreshold: 5.5 * a_day\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'month',\n\t\t\t\tfactor: days_in_a_month * a_day,\n\t\t\t\tthreshold: 3.5 * 7 * a_day\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'half-year',\n\t\t\t\tfactor: 0.5 * days_in_a_year * a_day,\n\t\t\t\tthreshold: 4.5 * days_in_a_month * a_day\n\t\t\t},\n\t\t\t{\n\t\t\t\tunit: 'year',\n\t\t\t\tfactor: days_in_a_year * a_day,\n\t\t\t\tthreshold: 9 * days_in_a_month * a_day,\n\t\t\t\tthreshold_for_month: 10.5 * days_in_a_month * a_day\n\t\t\t}\n\t\t]\n\n\t\treturn result\n\t}\n}\n\n// Chooses the appropriate time measurement unit \n// and also returns the corresponding rounded time amount.\n//\n// Rounds the `elapsed` time interval \n// to the most appropriate time measurement unit.\n//\n// Parameters:\n//\n//    elapsed - time interval (in seconds)\n//\n//    units   - a list of allowed time units\n//              (e.g. ['second', 'minute', 'hour', …])\n//\n//    gradation - (optional) time scale gradation steps.\n//                (e.g.\n//                [\n//                   { unit: 'second', factor: 1 }, \n//                   { unit: 'minute', factor: 60, threshold: 60 },\n//                   …\n//                ])\n//\n// Returns an object of `unit` and `amount`\n// (e.g. { unit: 'day', amount: 3 })\n//\nexport default function classify_elapsed(elapsed, units, gradation_steps)\n{\n\t// Time interval measurement unit rounding gradation\n\tgradation_steps = gradation_steps || gradation.convenient()\n\n\t// Leave only supported gradation steps\n\tgradation_steps = gradation_steps.filter(step => units.indexOf(step.unit) >= 0)\n\n\t// Find the most appropriate time scale gradation step\n\tlet i = 0\n\twhile (i < gradation_steps.length)\n\t{\n\t\t// Current step of time scale\n\t\tconst step = gradation_steps[i]\n\t\t// The next step of time scale\n\t\tconst next_step = i + 1 < gradation_steps.length ? gradation_steps[i + 1] : undefined\n\n\t\t// If it's not the last step of time scale,\n\t\t// and the next step of time scale is reachable,\n\t\t// then proceed with that next step of time scale.\n\t\tif (next_step)\n\t\t{\n\t\t\t// Allows threshold customization\n\t\t\t// based on which time interval measurement units\n\t\t\t// are available at the moment.\n\t\t\tconst specific_threshold = next_step[`threshold_for_${step.unit}`]\n\t\t\tconst next_step_threshold = specific_threshold || next_step.threshold\n\n\t\t\tif (elapsed >= next_step_threshold)\n\t\t\t{\n\t\t\t\ti++\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\t// Either it's the last step of time scale,\n\t\t// or the next step of time scale is unreachable,\n\t\t// so stick with the current step of time scale.\n\n\t\tconst exact_amount = elapsed / step.factor\n\t\tlet amount = Math.round(exact_amount)\n\n\t\t// Amount shouldn't be zero, \n\t\t// so set it to 1 at least.\n\t\tif (amount === 0)\n\t\t{\n\t\t\tamount = elapsed >= 0 ? 1 : -1\n\t\t}\n\n\t\t// Apply granularity to the time amount\n\t\t// (and fallback to the previous step\n\t\t//  if the first level of granularity\n\t\t//  isn't met by this amount)\n\t\tif (step.granularity)\n\t\t{\n\t\t\t// Recalculate time amount based on the granularity\n\t\t\tconst remainder = exact_amount % step.granularity\n\t\t\tamount = exact_amount - remainder\n\t\t\tamount += Math.round(remainder / step.granularity) * step.granularity\n\n\t\t\t// If the granularity for this step of time scale\n\t\t\t// is too high, then fallback \n\t\t\t// to the previous step of time scale.\n\t\t\t// (if there is the previous step of time scale)\n\t\t\tif (amount === 0)\n\t\t\t{\n\t\t\t\tconst previous_step = gradation_steps[i - 1]\n\n\t\t\t\tif (previous_step)\n\t\t\t\t{\n\t\t\t\t\tconst previous_step_result =\n\t\t\t\t\t{\n\t\t\t\t\t\tunit   : previous_step.unit, \n\t\t\t\t\t\tamount : Math.round(elapsed / previous_step.factor)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn previous_step_result\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Result\n\t\treturn { unit: step.unit, amount }\n\t}\n\n\tthrow new Error(`Not a single time unit of \"${units.join(', ')}\" was specified `\n\t\t+ `in the gradation \\n ${JSON.stringify({ gradation: gradation_steps }, null, 3)}`)\n}"]}